Object Oriented Programming - OOP
	An extemely common question that you will get during a job interview is "explain object oriented programming in your own words"

	"Object oriented programming is a way of coding that allows you to create object with properties that are cloned when you reference that object, so you don't have to type something over and over..."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OOP Vocab
	Encapsulation
		The ability to store information inside of an object so that it is only visible to the object
	
	Abstraction
		Hiding the internal mechanisms behind a simple interface.
	
	Inheritance
		Basing one object off another in order to retain similar implementation or properties

	Polymorphism
		The ability to perform the same action in different ways (i.e. run can be 2 legs or 4 legs)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What is an Object
	An object (sometimes referred to as a class in other languages) is a data type just like string and numbers but unlike those "primitive" data types they are used to store many values at once using keyed collections and more complex entries.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
How to think about an object
	An object is like a wallet that stores all kinds of things. You may have a card, that card is an ID or a debit card. You can have money which may be a single or a five. You can even use it to store things normally would't go in a wallet, like lint or paper clips.

	In this example the wallet object is holding a card key with an ID value. Etc...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
How to create An Object
	An empty object is created using either an object constructor or an object literal

	let wallet = new object();
		This is an object constructor
	
	let wallet = {};
		This is an object literal

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Key:Value aka Properties

	In order to save values in an object you need to assign them a key, king of like a name tag that you can refer to later to "get" the value back out. It is written like 
		card: "Debit"
		cash: 42
	Every key:value is seperated with a "," and the key and value pair is seperated with a colon.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assigning Values To Your Object
	Now we combine those two things and we end up with an object that is holding keys and values
		let wallet = {
			card: "Debit",
			cash: 42
		};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Active Engagement
	let student = {
		name: "Jaxson Hunt",
		id: 1098800,
		hairColor: "black",
		favoriteSnack: "pizza",
		class: "coding",
		sessionTime: "1:00"
	}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Reading Your Properties
	In the wallet object that we made we can add, remove and read any of the properties at any time.
	The values are called by using the properties and keys that we defined.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adding New Properties
	Just because a key was not added at creation does not mean that we can't add it later.

	We can also add new properties similar to how we took the value out.

	wallet.ID = "School ID"
	console.log(wallet.ID)
	//School ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Removing Properties
	Sometimes a card will expire, or be lost, or you will spend all your cash.
	When this happens the property will need to be removed from the object.
		delete wallet.cash;
	Rather than making the value 0 we can remove it entirely, sometimes this is preferable.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiword Properties
	You may also use multi word properties
	The benefit is being able to express more complicated keys or to have a value that works easier with something a person would read.
	This is very useful when creating databases or tables.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Square Brackets
	We can't add something like
		wallet.is poor = true
	This will break the code as well
		wallter."is poor" = true
	When creating multi word properties we need use square brackets
		wallet["is poor"] = true
	console.log(wallet["is poor"])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adding Through Prompts
	Most likely you will not want to fill out an entire object on your own, the code can do that for you
		let wallet = {}
		let money = prompt("how much do you want to take out", "20");
		wallet["cash"] = money
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Functions to Initialize/Clone
	Many times when you want to create a new object you will pass it through a function
	This is best done by using key:vlaue pairs with the same name and then passing the values through the parameters.

	function createStudent(name, id) {
		return {
			name: name
			id: id
		}
	}

	let jimmy = createStudent("Jimmy W.", 123456);

	console.log(jimmy.name)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The "in" Operator
	You should always check to make sure that a key is in an object before calling it.
	In order to do this we can use the in operator to check the key.
		"key" in object; // true or false
	For example:
		"cash" in wallet; // false, there if there is no cash in the wallet.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The "for..in" loop
	If you have an object that is filled with several properties that you would like to extract you may use a for in loop
		for(let key in wallet){
			console.log(key); //card, cash
			console.log(wallet[key]); //"debit", 42
		}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Object Referencing
	When you have a avariable

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Getter and Setter Properties
	You can create "child classes" where they have all of the same properties of the parent class and then you can define more.
	I.e. if you have na animal class and you make a cat subclass
		They will share many properties with other animals but you can add a few that only cats have, like lives.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Extending a Function
	You are allowed to extend any expression you want including functioon not just classes
	This is not as common but sometimes you need to create a class using a function, now you can extend it.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Super Methods
	Normally we don't want to overwrite a method when using it in a child class but we do want to modify it.
	To do this we use the super.keyword in order to refer to the parent class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Date Object
	The date object is a built in object that allows us to use time a bunch of different ways.
	Normally we would need to create a ton of different methods to access the day or month or find the time between.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
New Date
	We create new dates just like any other object
		let date = new Date();
	Inside of the parameters you have some options
		Milliseconds
		Datestring
		Year, month, date, hours, minutes, seconds, milliseconds
			Only the year and month are required.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Milliseconds
	If you are putting in milliseconds it is calculated from Jan 1st of 1970 at midnight (0:00)
	(days*hours*minutes*seconds*milliseconds)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Datestring
	A string will be parsed automatically
		let date = new Date ("2021-01-20")
	If the time is not set it is assumed to be midnight GMT and is adjusted according to timezone. For instance:
		Thu Jan 20 2021 11:00:00 (Australia)
		Wed Jan 19 2021 16:00:00 (California)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Year, month, date, ....
	You can also create a date in the local time zone just using jumpers.
	Year, just be 4 digits
	Month starts at 0 (jan) and goes to 11 (Dec)
	date starts at 1
	hours, minutes seconds all start at 0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Date Methods
	getFullYear()
		Get the year in four digits
	getMonths()
		Get the month from 0 to 11
	getDate()
		Get the day of the month from 1 to 31
	getHours, minutes, etc...
	getDay()
		Will return the day of the week 0(sun) to 6(sat)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Auto Correcting
	The date object also auto corrects errors for you
	let date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?
	alert(date)

	This is often used to find a time tht is x minutes from the old time.

	let date = new Date()
	date.setSeconds(date.getSeconds() + 70)
	alert(Date)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Date.now()
	This returns the current time on the device you are using.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Events
	An event is something happening on the page, normally this is caused by the user interacting with the page.
	Every DOM node (elements/items) oon the page generaes all of the signals, normally they are just set to do nothing.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event Listeners
	In order to react to these signals we need to set up event listeners that will wait on the page until the event triggers it
	We have been using one of them for a while now called onclick
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Common Mouse Events
	click
		When the mouse is pressed and released on an element
	contextmenu
		When the mouse right-clicks on an element
	mouseover/mouseout
		When the mouse cursor moves over or leave an element
	mousedown / mouseup
		When the mouse button is pressed/ released over an element
	mousemove
		When the mouse is moved.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Common Keyboard Events
	keydown
		When the keyboard is pressed
	keyup
		When the keyboard key is released
	Submit
		When you hit the submit button in the form
	Focus
		When the user selects an element on the form e.g. an input box
	DOMContentLoaded
		When the HTML is loaded and the DOM is fully built
	Transitionend
		When a CSS animation finishes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event Handlers
	Once a listener activates from the user interacting you have to tell it how to act.
	A handler will tell the event listener what to do once it notices that the event has happened.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Using "this"
	You ca use this and refer to the element that even is tied to, for example

	<button onclick="alter(this.innerHTML)">Click me</button>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adding and removing Event Listeners
	elemID.addEventListener (event, handler, [options])
	elemID.removeEventListener (event, handler, [options])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
More Shorthand
	Since JS knows that the eventListener needs to be added to an element you can use horthand and jusr say the id of the element without doing the jquery
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event Object
	When an event happens on your page the browser creates an event object that stores information about the event
	For example: What kind of event, what it clicked on, and relative position.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event Object Properties
	There are a lot of properties that you can use from the Event Object, here are a few
	event.type
		Will tell you what kind of action you are taking, right click, left click, etc.
	event.currentTarget
		what you are clicking on
	event.clientX / event.clientY
		Where you are clicking in px
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Giving Multiple Events
	You can make a switch case where you can assign what should happen with each event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Affecting the Styles
	Using style.property on the current target element will allow you to change the property to whatever you want.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adding Events In a "for" Loop
	If you want to create a large groups of divs that all have event listeners you can add them with a loop, and save yourself some work.
	There are a few new bits of code thatyou will need to know
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Creating Elements
	You can use the document object to make new elements, just not read the elements on it.
	Example:
		document.createElement("div")

		document.createElement("li)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Appending Child
	Once you have created an updated the element that you want to add to the html you can then take that element and add it to the HTML by appending child of the parent element.
	Example:
		parent.appendChild(child)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create, Add, Append, Repeat
	for (let i = 0; i < 9; i++){
		let square = document.creatElement("div");
		square.addEventListener("mouseover", testing);
		main.appendChild(square)
	}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Transitions
	There are a lot of different CSS animations that you can put on your work but the first one (and easiest one) that we are going to use is transition
	Every time a property changes on your CSS the transition will show the change from one to the next.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Custom Cursors
	There are a few ways to make a custom cursor on the screen, we are going to learn the simple way for now.
	The cursor property is a way that we can change what the cursor looks like